<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    alias(libs.plugins.google.gms.google.services)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.elienorcandlev2&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.elienorcandlev2&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.firebase.auth)&#10;    implementation(&quot;com.google.android.gms:play-services-auth:21.1.0&quot;)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    alias(libs.plugins.google.gms.google.services)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.elienorcandlev2&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.elienorcandlev2&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.firebase.auth)&#10;    implementation(libs.google.auth)&#10;    implementation(&quot;com.google.android.gms:play-services-auth:21.1.0&quot;)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/elienorcandlev2/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/elienorcandlev2/MainActivity.kt" />
              <option name="originalContent" value="package com.example.elienorcandlev2&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Toast&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.result.ActivityResultLauncher&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import com.example.elienorcandlev2.screens.LoginScreen&#10;import com.example.elienorcandlev2.screens.ForgotPasswordScreen&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;import com.google.android.gms.common.api.ApiException&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.auth.GoogleAuthProvider&#10;&#10;class MainActivity : ComponentActivity() {&#10;    private lateinit var auth: FirebaseAuth&#10;    private lateinit var googleSignInLauncher: ActivityResultLauncher&lt;Intent&gt;&#10;    private var screen by mutableStateOf(&quot;&quot;)&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        auth = FirebaseAuth.getInstance()&#10;        screen = if (auth.currentUser != null) &quot;dashboard&quot; else &quot;login&quot;&#10;        setContent {&#10;            com.example.elienorcandlev2.ui.theme.ElienorCandleV2Theme {&#10;                when (screen) {&#10;                    &quot;login&quot; -&gt; {&#10;                        LoginScreen(&#10;                            onForgotPassword = { screen = &quot;forgot-password&quot; },&#10;                            onLogin = { email, password -&gt;&#10;                                loginUser(email, password) { success -&gt;&#10;                                    if (success) screen = &quot;dashboard&quot;&#10;                                }&#10;                            },&#10;                            onGoogleSignIn = { startGoogleSignIn() }&#10;                        )&#10;                    }&#10;                    &quot;forgot-password&quot; -&gt; {&#10;                        ForgotPasswordScreen(&#10;                            onBackToLogin = { screen = &quot;login&quot; }&#10;                        )&#10;                    }&#10;                    &quot;dashboard&quot; -&gt; {&#10;                        com.example.elienorcandlev2.screens.MainScreen()&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        googleSignInLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result -&gt;&#10;            if (result.resultCode == RESULT_OK) {&#10;                val data = result.data&#10;                val task = GoogleSignIn.getSignedInAccountFromIntent(data)&#10;                try {&#10;                    val account = task.getResult(ApiException::class.java)&#10;                    firebaseAuthWithGoogle(account.idToken ?: &quot;&quot;) { success -&gt;&#10;                        if (success) {&#10;                            screen = &quot;dashboard&quot;&#10;                        }&#10;                    }&#10;                } catch (e: ApiException) {&#10;                    Log.w(&quot;FIREBASE&quot;, &quot;Google sign in failed&quot;, e)&#10;                    runOnUiThread {&#10;                        Toast.makeText(this, &quot;Google sign-in failed: ${e.localizedMessage}&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loginUser(email: String, password: String, onResult: (Boolean) -&gt; Unit = {}) {&#10;        auth.signInWithEmailAndPassword(email, password)&#10;            .addOnCompleteListener { task -&gt;&#10;                if (task.isSuccessful) {&#10;                    val user = auth.currentUser&#10;                    Log.d(&quot;FIREBASE&quot;, &quot;Logged in: ${user?.email}&quot;)&#10;                    runOnUiThread {&#10;                        Toast.makeText(this, &quot;Login successful!&quot;, Toast.LENGTH_SHORT).show()&#10;                        onResult(true)&#10;                    }&#10;                } else {&#10;                    Log.e(&quot;FIREBASE&quot;, &quot;Login failed: ${task.exception?.message}&quot;)&#10;                    runOnUiThread {&#10;                        Toast.makeText(this, &quot;Login failed: ${task.exception?.message}&quot;, Toast.LENGTH_SHORT).show()&#10;                        onResult(false)&#10;                    }&#10;                }&#10;            }&#10;    }&#10;&#10;    private fun firebaseAuthWithGoogle(idToken: String, onResult: (Boolean) -&gt; Unit = {}) {&#10;        val credential = GoogleAuthProvider.getCredential(idToken, null)&#10;        auth.signInWithCredential(credential)&#10;            .addOnCompleteListener(this) { task -&gt;&#10;                if (task.isSuccessful) {&#10;                    val user = auth.currentUser&#10;                    Log.d(&quot;FIREBASE&quot;, &quot;Google sign-in success: ${user?.email}&quot;)&#10;                    runOnUiThread {&#10;                        Toast.makeText(this, &quot;Google sign-in successful!&quot;, Toast.LENGTH_SHORT).show()&#10;                        onResult(true)&#10;                    }&#10;                } else {&#10;                    Log.w(&quot;FIREBASE&quot;, &quot;Google sign-in failed&quot;, task.exception)&#10;                    runOnUiThread {&#10;                        Toast.makeText(this, &quot;Google sign-in failed: ${task.exception?.localizedMessage}&quot;, Toast.LENGTH_SHORT).show()&#10;                        onResult(false)&#10;                    }&#10;                }&#10;            }&#10;    }&#10;&#10;    private fun startGoogleSignIn() {&#10;        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;            .requestIdToken(getString(R.string.default_web_client_id))&#10;            .requestEmail()&#10;            .build()&#10;        val googleSignInClient = com.google.android.gms.auth.api.signin.GoogleSignIn.getClient(this, gso)&#10;        val signInIntent = googleSignInClient.signInIntent&#10;        googleSignInLauncher.launch(signInIntent)&#10;    }&#10;&#10;    fun logoutUser(onResult: () -&gt; Unit = {}) {&#10;        val user = auth.currentUser&#10;        val isGoogleUser = user?.providerData?.any { it.providerId == GoogleAuthProvider.PROVIDER_ID } == true&#10;        auth.signOut()&#10;        if (isGoogleUser) {&#10;            val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;                .requestIdToken(getString(R.string.default_web_client_id))&#10;                .requestEmail()&#10;                .build()&#10;            val googleSignInClient = com.google.android.gms.auth.api.signin.GoogleSignIn.getClient(this, gso)&#10;            googleSignInClient.signOut().addOnCompleteListener {&#10;                runOnUiThread {&#10;                    Toast.makeText(this, &quot;Logged out successfully!&quot;, Toast.LENGTH_SHORT).show()&#10;                    screen = &quot;login&quot;&#10;                    onResult()&#10;                }&#10;            }&#10;        } else {&#10;            runOnUiThread {&#10;                Toast.makeText(this, &quot;Logged out successfully!&quot;, Toast.LENGTH_SHORT).show()&#10;                screen = &quot;login&quot;&#10;                onResult()&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.elienorcandlev2&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Toast&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.result.ActivityResultLauncher&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import com.example.elienorcandlev2.screens.LoginScreen&#10;import com.example.elienorcandlev2.screens.ForgotPasswordScreen&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions&#10;import com.google.android.gms.common.api.ApiException&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.auth.GoogleAuthProvider&#10;&#10;class MainActivity : ComponentActivity() {&#10;    private lateinit var auth: FirebaseAuth&#10;    private lateinit var googleSignInLauncher: ActivityResultLauncher&lt;Intent&gt;&#10;    private var screen by mutableStateOf(&quot;&quot;)&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        auth = FirebaseAuth.getInstance()&#10;        screen = if (auth.currentUser != null) &quot;dashboard&quot; else &quot;login&quot;&#10;        setContent {&#10;            com.example.elienorcandlev2.ui.theme.ElienorCandleV2Theme {&#10;                when (screen) {&#10;                    &quot;login&quot; -&gt; {&#10;                        LoginScreen(&#10;                            onForgotPassword = { screen = &quot;forgot-password&quot; },&#10;                            onLogin = { email, password -&gt;&#10;                                loginUser(email, password) { success -&gt;&#10;                                    if (success) screen = &quot;dashboard&quot;&#10;                                }&#10;                            },&#10;                            onGoogleSignIn = { startGoogleSignIn() }&#10;                        )&#10;                    }&#10;                    &quot;forgot-password&quot; -&gt; {&#10;                        ForgotPasswordScreen(&#10;                            onBackToLogin = { screen = &quot;login&quot; }&#10;                        )&#10;                    }&#10;                    &quot;dashboard&quot; -&gt; {&#10;                        com.example.elienorcandlev2.screens.MainScreen()&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        googleSignInLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result -&gt;&#10;            if (result.resultCode == RESULT_OK) {&#10;                val data = result.data&#10;                val task = GoogleSignIn.getSignedInAccountFromIntent(data)&#10;                try {&#10;                    val account = task.getResult(ApiException::class.java)&#10;                    firebaseAuthWithGoogle(account.idToken ?: &quot;&quot;) { success -&gt;&#10;                        if (success) {&#10;                            screen = &quot;dashboard&quot;&#10;                        }&#10;                    }&#10;                } catch (e: ApiException) {&#10;                    Log.w(&quot;FIREBASE&quot;, &quot;Google sign in failed&quot;, e)&#10;                    runOnUiThread {&#10;                        Toast.makeText(this, &quot;Google sign-in failed: ${e.localizedMessage}&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun loginUser(email: String, password: String, onResult: (Boolean) -&gt; Unit = {}) {&#10;        auth.signInWithEmailAndPassword(email, password)&#10;            .addOnCompleteListener { task -&gt;&#10;                if (task.isSuccessful) {&#10;                    val user = auth.currentUser&#10;                    Log.d(&quot;FIREBASE&quot;, &quot;Logged in: ${user?.email}&quot;)&#10;                    runOnUiThread {&#10;                        Toast.makeText(this, &quot;Login successful!&quot;, Toast.LENGTH_SHORT).show()&#10;                        onResult(true)&#10;                    }&#10;                } else {&#10;                    Log.e(&quot;FIREBASE&quot;, &quot;Login failed: ${task.exception?.message}&quot;)&#10;                    runOnUiThread {&#10;                        Toast.makeText(this, &quot;Login failed: ${task.exception?.message}&quot;, Toast.LENGTH_SHORT).show()&#10;                        onResult(false)&#10;                    }&#10;                }&#10;            }&#10;    }&#10;&#10;    private fun firebaseAuthWithGoogle(idToken: String, onResult: (Boolean) -&gt; Unit = {}) {&#10;        val credential = GoogleAuthProvider.getCredential(idToken, null)&#10;        auth.signInWithCredential(credential)&#10;            .addOnCompleteListener(this) { task -&gt;&#10;                if (task.isSuccessful) {&#10;                    val user = auth.currentUser&#10;                    Log.d(&quot;FIREBASE&quot;, &quot;Google sign-in success: ${user?.email}&quot;)&#10;                    runOnUiThread {&#10;                        Toast.makeText(this, &quot;Google sign-in successful!&quot;, Toast.LENGTH_SHORT).show()&#10;                        onResult(true)&#10;                    }&#10;                } else {&#10;                    Log.w(&quot;FIREBASE&quot;, &quot;Google sign-in failed&quot;, task.exception)&#10;                    runOnUiThread {&#10;                        Toast.makeText(this, &quot;Google sign-in failed: ${task.exception?.localizedMessage}&quot;, Toast.LENGTH_SHORT).show()&#10;                        onResult(false)&#10;                    }&#10;                }&#10;            }&#10;    }&#10;&#10;    private fun startGoogleSignIn() {&#10;        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;            .requestIdToken(getString(R.string.default_web_client_id))&#10;            .requestEmail()&#10;            .build()&#10;        val googleSignInClient = GoogleSignIn.getClient(this, gso)&#10;        val signInIntent = googleSignInClient.signInIntent&#10;        googleSignInLauncher.launch(signInIntent)&#10;    }&#10;&#10;    fun logoutUser(onResult: () -&gt; Unit = {}) {&#10;        val user = auth.currentUser&#10;        val isGoogleUser = user?.providerData?.any { it.providerId == GoogleAuthProvider.PROVIDER_ID } == true&#10;        auth.signOut()&#10;        if (isGoogleUser) {&#10;            val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;                .requestIdToken(getString(R.string.default_web_client_id))&#10;                .requestEmail()&#10;                .build()&#10;            val googleSignInClient = GoogleSignIn.getClient(this, gso)&#10;            googleSignInClient.signOut().addOnCompleteListener {&#10;                runOnUiThread {&#10;                    Toast.makeText(this, &quot;Logged out successfully!&quot;, Toast.LENGTH_SHORT).show()&#10;                    screen = &quot;login&quot;&#10;                    onResult()&#10;                }&#10;            }&#10;        } else {&#10;            runOnUiThread {&#10;                Toast.makeText(this, &quot;Logged out successfully!&quot;, Toast.LENGTH_SHORT).show()&#10;                screen = &quot;login&quot;&#10;                onResult()&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/elienorcandlev2/components/NavigationBar.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/elienorcandlev2/components/NavigationBar.kt" />
              <option name="updatedContent" value="package com.example.elienorcandlev2.components&#10;&#10;import androidx.compose.material3.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.List&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.sp&#10;&#10;@Composable&#10;fun BottomNavigationBar(selectedIndex: Int, onItemSelected: (Int) -&gt; Unit) {&#10;    val items = listOf(&quot;Dashboard&quot;, &quot;Orders&quot;, &quot;Products&quot;, &quot;Customers&quot;, &quot;Analytics&quot;)&#10;    val icons = listOf(&#10;        Icons.Filled.Home,&#10;        Icons.AutoMirrored.Filled.List,&#10;        Icons.Filled.ShoppingCart,&#10;        Icons.Filled.Person,&#10;        Icons.Filled.Info&#10;    )&#10;    NavigationBar(containerColor = Color(0xFFFCFAF8)) {&#10;        items.forEachIndexed { index, label -&gt;&#10;            NavigationBarItem(&#10;                icon = {&#10;                    Icon(&#10;                        imageVector = icons[index],&#10;                        contentDescription = label&#10;                    )&#10;                },&#10;                label = { Text(label, fontSize = 12.sp) },&#10;                selected = selectedIndex == index,&#10;                onClick = { onItemSelected(index) },&#10;                colors = NavigationBarItemDefaults.colors(&#10;                    selectedIconColor = Color(0xFF1C130D),&#10;                    unselectedIconColor = Color(0xFF9E6D47),&#10;                    selectedTextColor = Color(0xFF1C130D),&#10;                    unselectedTextColor = Color(0xFF9E6D47)&#10;                )&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/elienorcandlev2/screens/SettingsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/elienorcandlev2/screens/SettingsScreen.kt" />
              <option name="originalContent" value="package com.example.elienorcandlev2.screens&#10;&#10;import android.content.Context&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.automirrored.filled.KeyboardArrowRight&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.flow.first&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SettingsScreen(&#10;    onLogout: () -&gt; Unit,&#10;    onBack: () -&gt; Unit&#10;) {&#10;    val scrollState = rememberScrollState()&#10;    val context = LocalContext.current&#10;    val coroutineScope = rememberCoroutineScope()&#10;    // Load persisted theme on first composition&#10;    LaunchedEffect(Unit) {&#10;        val theme = context.dataStore.data.firstOrNull()?.get(THEME_KEY) ?: 0&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color(0xFFFCFAF8))&#10;            .verticalScroll(scrollState)&#10;    ) {&#10;        TopAppBar(&#10;            title = {&#10;                Box(Modifier.fillMaxWidth()) {&#10;                    Text(&#10;                        &quot;Settings&quot;,&#10;                        modifier = Modifier.align(Alignment.Center),&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                    // Add invisible box to the left to balance the back arrow&#10;                    Box(modifier = Modifier.align(Alignment.CenterStart).size(48.dp).alpha(0f))&#10;                    // Add invisible box to the right to balance the actions slot (if any)&#10;                    Box(modifier = Modifier.align(Alignment.CenterEnd).size(48.dp).alpha(0f))&#10;                }&#10;            },&#10;            navigationIcon = {&#10;                IconButton(onClick = onBack) {&#10;                    Icon(&#10;                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                        contentDescription = &quot;Back&quot;&#10;                    )&#10;                }&#10;            },&#10;            colors = TopAppBarDefaults.mediumTopAppBarColors(containerColor = Color(0xFFFCFAF8))&#10;        )&#10;&#10;        Section(title = &quot;User Profile&quot;) {&#10;            SettingItem(label = &quot;Manage Account&quot;)&#10;        }&#10;&#10;        Section(title = &quot;General Settings&quot;) {&#10;            SettingItem(label = &quot;Site Name&quot;, subLabel = &quot;Scented Flames&quot;)&#10;            SettingItem(label = &quot;Contact Email&quot;, subLabel = &quot;support@scentedflames.com&quot;)&#10;        }&#10;&#10;        Section(title = &quot;Payment Gateway Settings&quot;) {&#10;            SettingItem(label = &quot;Payment Gateways&quot;, subLabel = &quot;Stripe, PayPal&quot;)&#10;        }&#10;&#10;        Section(title = &quot;Storefront Customization&quot;) {&#10;            SettingItem(label = &quot;Appearance&quot;, subLabel = &quot;Theme: Minimalist&quot;)&#10;        }&#10;&#10;        Section(title = &quot;Product Categories Management&quot;) {&#10;            SettingItem(label = &quot;Manage Categories&quot;)&#10;        }&#10;&#10;        Section(title = &quot;Discount Code Management&quot;) {&#10;            SettingItem(label = &quot;Manage Discounts&quot;)&#10;        }&#10;&#10;        Section(title = &quot;CRM Settings&quot;) {&#10;            SettingItem(label = &quot;CRM Integration&quot;, subLabel = &quot;Integrated&quot;)&#10;        }&#10;&#10;        Section(title = &quot;Reporting and Analytics Preferences&quot;) {&#10;            SettingItem(label = &quot;Customize Reports&quot;)&#10;        }&#10;&#10;        Section(title = &quot;Shipping Settings&quot;) {&#10;            SettingItem(label = &quot;Free Shipping Threshold&quot;, subLabel = &quot;$50&quot;)&#10;            SettingItem(label = &quot;Shipping Rate&quot;, subLabel = &quot;$5&quot;)&#10;        }&#10;&#10;        Section(title = &quot;Tax Settings&quot;) {&#10;            SettingItem(label = &quot;Tax Rate&quot;, subLabel = &quot;10%&quot;)&#10;        }&#10;&#10;        Section(title = &quot;Notification Settings&quot;) {&#10;            ToggleSettingItem(label = &quot;Push Notifications&quot;)&#10;            ToggleSettingItem(label = &quot;Sound&quot;)&#10;        }&#10;&#10;        Section(title = &quot;Basic Settings&quot;) {&#10;            SettingItem(label = &quot;App Version&quot;, subLabel = &quot;v1.2.3&quot;)&#10;            SettingItem(label = &quot;Privacy Policy&quot;)&#10;            SettingItem(label = &quot;Terms of Service&quot;)&#10;        }&#10;&#10;        Row(modifier = Modifier.padding(16.dp)) {&#10;            Button(&#10;                onClick = onLogout,&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFF4ECE6)),&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&quot;Logout&quot;, color = Color(0xFF1C130D), fontWeight = FontWeight.Bold)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Section(title: String, content: @Composable ColumnScope.() -&gt; Unit) {&#10;    Column(modifier = Modifier.padding(top = 20.dp)) {&#10;        Text(&#10;            text = title,&#10;            color = Color(0xFF1C130D),&#10;            fontSize = 22.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(horizontal = 16.dp)&#10;        )&#10;        content()&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SettingItem(label: String, subLabel: String? = null) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable { /* Handle click */ }&#10;            .padding(horizontal = 16.dp, vertical = 12.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Column(modifier = Modifier.weight(1f)) {&#10;            Text(text = label, color = Color(0xFF1C130D), fontWeight = FontWeight.Medium)&#10;            subLabel?.let {&#10;                Text(text = it, color = Color(0xFF9E6D47), fontSize = 12.sp)&#10;            }&#10;        }&#10;        Icon(&#10;            imageVector = Icons.AutoMirrored.Filled.KeyboardArrowRight,&#10;            contentDescription = null,&#10;            tint = Color(0xFF1C130D)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ToggleSettingItem(label: String) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp, vertical = 12.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Text(text = label, color = Color(0xFF1C130D))&#10;        Switch(checked = true, onCheckedChange = { /* Handle toggle */ })&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.elienorcandlev2.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.automirrored.filled.KeyboardArrowRight&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SettingsScreen(&#10;    onLogout: () -&gt; Unit,&#10;    onBack: () -&gt; Unit&#10;) {&#10;    val scrollState = rememberScrollState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color(0xFFFCFAF8))&#10;            .verticalScroll(scrollState)&#10;    ) {&#10;        TopAppBar(&#10;            title = {&#10;                Box(Modifier.fillMaxWidth()) {&#10;                    Text(&#10;                        &quot;Settings&quot;,&#10;                        modifier = Modifier.align(Alignment.Center),&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                    // Add invisible box to the left to balance the back arrow&#10;                    Box(modifier = Modifier.align(Alignment.CenterStart).size(48.dp).alpha(0f))&#10;                    // Add invisible box to the right to balance the actions slot (if any)&#10;                    Box(modifier = Modifier.align(Alignment.CenterEnd).size(48.dp).alpha(0f))&#10;                }&#10;            },&#10;            navigationIcon = {&#10;                IconButton(onClick = onBack) {&#10;                    Icon(&#10;                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                        contentDescription = &quot;Back&quot;&#10;                    )&#10;                }&#10;            },&#10;            colors = TopAppBarDefaults.mediumTopAppBarColors(containerColor = Color(0xFFFCFAF8))&#10;        )&#10;&#10;        Section(title = &quot;User Profile&quot;) {&#10;            SettingItem(label = &quot;Manage Account&quot;)&#10;        }&#10;&#10;        Section(title = &quot;General Settings&quot;) {&#10;            SettingItem(label = &quot;Site Name&quot;, subLabel = &quot;Scented Flames&quot;)&#10;            SettingItem(label = &quot;Contact Email&quot;, subLabel = &quot;support@scentedflames.com&quot;)&#10;        }&#10;&#10;        Section(title = &quot;Payment Gateway Settings&quot;) {&#10;            SettingItem(label = &quot;Payment Gateways&quot;, subLabel = &quot;Stripe, PayPal&quot;)&#10;        }&#10;&#10;        Section(title = &quot;Storefront Customization&quot;) {&#10;            SettingItem(label = &quot;Appearance&quot;, subLabel = &quot;Theme: Minimalist&quot;)&#10;        }&#10;&#10;        Section(title = &quot;Product Categories Management&quot;) {&#10;            SettingItem(label = &quot;Manage Categories&quot;)&#10;        }&#10;&#10;        Section(title = &quot;Discount Code Management&quot;) {&#10;            SettingItem(label = &quot;Manage Discounts&quot;)&#10;        }&#10;&#10;        Section(title = &quot;CRM Settings&quot;) {&#10;            SettingItem(label = &quot;CRM Integration&quot;, subLabel = &quot;Integrated&quot;)&#10;        }&#10;&#10;        Section(title = &quot;Reporting and Analytics Preferences&quot;) {&#10;            SettingItem(label = &quot;Customize Reports&quot;)&#10;        }&#10;&#10;        Section(title = &quot;Shipping Settings&quot;) {&#10;            SettingItem(label = &quot;Free Shipping Threshold&quot;, subLabel = &quot;$50&quot;)&#10;            SettingItem(label = &quot;Shipping Rate&quot;, subLabel = &quot;$5&quot;)&#10;        }&#10;&#10;        Section(title = &quot;Tax Settings&quot;) {&#10;            SettingItem(label = &quot;Tax Rate&quot;, subLabel = &quot;10%&quot;)&#10;        }&#10;&#10;        Section(title = &quot;Notification Settings&quot;) {&#10;            ToggleSettingItem(label = &quot;Push Notifications&quot;)&#10;            ToggleSettingItem(label = &quot;Sound&quot;)&#10;        }&#10;&#10;        Section(title = &quot;Basic Settings&quot;) {&#10;            SettingItem(label = &quot;App Version&quot;, subLabel = &quot;v1.2.3&quot;)&#10;            SettingItem(label = &quot;Privacy Policy&quot;)&#10;            SettingItem(label = &quot;Terms of Service&quot;)&#10;        }&#10;&#10;        Row(modifier = Modifier.padding(16.dp)) {&#10;            Button(&#10;                onClick = onLogout,&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFF4ECE6)),&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&quot;Logout&quot;, color = Color(0xFF1C130D), fontWeight = FontWeight.Bold)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Section(title: String, content: @Composable ColumnScope.() -&gt; Unit) {&#10;    Column(modifier = Modifier.padding(top = 20.dp)) {&#10;        Text(&#10;            text = title,&#10;            color = Color(0xFF1C130D),&#10;            fontSize = 22.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(horizontal = 16.dp)&#10;        )&#10;        content()&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SettingItem(label: String, subLabel: String? = null) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable { /* Handle click */ }&#10;            .padding(horizontal = 16.dp, vertical = 12.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Column(modifier = Modifier.weight(1f)) {&#10;            Text(text = label, color = Color(0xFF1C130D), fontWeight = FontWeight.Medium)&#10;            subLabel?.let {&#10;                Text(text = it, color = Color(0xFF9E6D47), fontSize = 12.sp)&#10;            }&#10;        }&#10;        Icon(&#10;            imageVector = Icons.AutoMirrored.Filled.KeyboardArrowRight,&#10;            contentDescription = null,&#10;            tint = Color(0xFF1C130D)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ToggleSettingItem(label: String) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp, vertical = 12.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Text(text = label, color = Color(0xFF1C130D))&#10;        Switch(checked = true, onCheckedChange = { /* Handle toggle */ })&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;Elienor Candle V2&lt;/string&gt;&#10;&#10;&#10;" />
              <option name="updatedContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;Elienor Candle V2&lt;/string&gt;&#10;    &lt;string name=&quot;default_web_client_id&quot;&gt;308515896935-0l8ih7eg4594875u15uun3ah2t7hfkil.apps.googleusercontent.com&lt;/string&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>